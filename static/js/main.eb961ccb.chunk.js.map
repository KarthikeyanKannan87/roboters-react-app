{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","alt","src","children","id","name","email","CardList","console","log","users","map","user","key","SearchBox","placeHolder","handleChange","type","placeholder","onChange","App","handleSearchBoxChange","e","setState","searchEntry","target","value","state","fetch","then","response","json","usersFetched","catch","this","filteredUsers","filter","toLowerCase","includes","onClick","userName","logo","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,kC,6PCI9BC,G,kBAAO,SAAAC,GAIhB,OAAO,yBAAKC,UAAU,kBAElB,6BACI,yBAAKC,IAAI,OAAOC,IAAG,+BAA0BH,EAAMI,SAASC,GAAzC,4BACnB,gCAAML,EAAMI,SAASE,KAArB,KACA,+BAAKN,EAAMI,SAASG,MAApB,SCRCC,EAAW,SAAAR,GAIpB,OAHAS,QAAQC,IAAI,mBACZD,QAAQC,IAAIV,GAEL,yBAAKC,UAAU,aAElBD,EAAMW,MAAMC,KAAI,SAAAC,GAAI,OAChB,kBAAC,EAAD,CAAMC,IAAKD,EAAKR,IAAKQ,QCRpBE,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OAAO,2BACHhB,UAAU,SACViB,KAAK,SACLC,YAAaH,EACbI,SAAUH,MC+DHI,E,kDA/Db,aAAe,IAAD,8BACZ,gBAgBFC,sBAAwB,SAACC,GACvB,EAAKC,SAAU,CAACC,YAAaF,EAAEG,OAAOC,QAAQ,kBAAMlB,QAAQC,IAAI,EAAKkB,WAhBrE,EAAKA,MAAQ,CACXjB,MAAO,GACPc,YAAa,IAJH,E,gEAQO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAY,OAAIxB,QAAQC,IAAI,kEACZD,QAAQC,IAAIuB,GACZ,EAAKT,SAAS,CAACb,MAAOsB,OAC3CC,MAAM,sC,+BAOC,IAAD,SAEwBC,KAAKP,MAA5BjB,EAFD,EAECA,MAAOc,EAFR,EAEQA,YACTW,EAAgBzB,EAAM0B,QAAO,SAAAxB,GAAI,OACnCA,EAAKP,KAAKgC,cAAcC,SAASd,EAAYa,kBAGjD,OACE,yBAAKrC,UAAU,OAEb,4BAAQA,UAAU,cAChB,4BAAQuC,QAAS,kBAAM,EAAKhB,SAAS,CAACiB,SAAU,YAAhD,SACA,sCAAaN,KAAKP,MAAMa,SAAxB,MAEA,yBAAKtC,IAAKuC,IAAMzC,UAAU,WAAWC,IAAI,SACzC,yCAcF,kBAAC,EAAD,CACEc,YAAY,gBACZC,aAAckB,KAAKb,wBAIrB,kBAAC,EAAD,CAAUX,MAAOyB,S,GA1DPO,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAyB,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.eb961ccb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nimport './card.styles.css'\r\n\r\nexport const Card = props => {\r\n    //console.log('Card Props: ');\r\n    //console.log(props);\r\n\r\n    return <div className='card-container'>\r\n    {\r\n        <div>\r\n            <img alt=\"user\" src={`https://robohash.org/${props.children.id}?set=set1&size=180x180`}/>\r\n            <h2> {props.children.name} </h2>\r\n            <p> {props.children.email} </p>\r\n        </div>\r\n    }\r\n    </div>\r\n}","import React from 'react';\r\n\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.component'\r\n\r\nexport const CardList = props => {\r\n    console.log('CardList props:');\r\n    console.log(props);\r\n\r\n    return <div className='card-list'>\r\n    { \r\n        props.users.map(user => (\r\n            <Card key={user.id}>{user}</Card>\r\n        ))        \r\n    } \r\n    </div>;\r\n}","import React from 'react'\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ( {placeHolder, handleChange} ) => {\r\n    return <input\r\n        className='search'\r\n        type='search'\r\n        placeholder={placeHolder}\r\n        onChange={handleChange}\r\n    />;\r\n}","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport { CardList } from './components/card-list/card-list.component';\nimport {SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      users: [],\n      searchEntry: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(usersFetched => console.log('Users Fetched from https://jsonplaceholder.typicode.com/users:') | \n                          console.log(usersFetched) | \n                          this.setState({users: usersFetched}))\n    .catch('Error with fetching users list !')\n  }\n\n  handleSearchBoxChange = (e) => {\n    this.setState( {searchEntry: e.target.value}, () => console.log(this.state) );\n  }\n\n  render() {\n\n    const { users, searchEntry } = this.state;\n    const filteredUsers = users.filter(user =>\n        user.name.toLowerCase().includes(searchEntry.toLowerCase())\n      );\n\n    return (\n      <div className=\"App\">\n      \n        <header className=\"App-header\">\n          <button onClick={() => this.setState({userName: 'Robot'})}>Login</button>\n          <p>Welcome { this.state.userName } !</p>\n\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1>ROBOTERS</h1>\n\n        </header>\n\n        {\n        // <input \n        //   type='search' \n        //   placeholder='Search Users'\n        //   onChange={ e => {\n        //     this.setState( {searchEntry: e.target.value}, () => console.log(this.state) );\n        //   }}\n        // />\n        }\n        {\n        <SearchBox\n          placeHolder='Search Robots'\n          handleChange={this.handleSearchBoxChange}\n        />\n        }\n\n        <CardList users={filteredUsers}/>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}